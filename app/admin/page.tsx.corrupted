'use client';'use client';



import { useEffect, useState } from 'react';import { useEffect, useState } from 'react';

import { useRouter } from 'next/navigation';import { useRouter } from 'next/navigation';

import Link from 'next/link';import {

import { useTheme } from 'next-themes';  Card,

import {  CardContent,

  Card,  CardDescription,

  CardContent,  CardHeader,

  CardDescription,  CardTitle,

  CardHeader,} from '@/components/ui/card';

  CardTitle,import {

} from '@/components/ui/card';  Breadcrumb,

import { Button } from '@/components/ui/button';  BreadcrumbItem,

import {  BreadcrumbList,

  Users,  BreadcrumbPage,

  Trophy,} from '@/components/ui/breadcrumb';

  Shield,import {

  Loader2,  SidebarTrigger,

  Calendar,} from '@/components/ui/sidebar';

  UserCheck,import { Separator } from '@/components/ui/separator';

  Flag,import {

  Settings,  Users,

  LayoutDashboard,  Trophy,

  UserCog,  Shield,

  UsersRound,  Loader2,

  Swords,  Calendar,

  FileText,  BarChart3,

  LogOut,  UserCheck,

  Sun,  Flag,

  Moon,} from 'lucide-react';

} from 'lucide-react';

interface UserData {

interface UserData {  id: string;

  id: string;  adSoyad: string;

  adSoyad: string;  rol: 'PLAYER' | 'REFEREE' | 'ADMIN';

  rol: 'PLAYER' | 'REFEREE' | 'ADMIN';}

}

interface AdminStats {

interface AdminStats {  totalUsers: number;

  totalUsers: number;  totalPlayers: number;

  totalPlayers: number;  totalReferees: number;

  totalReferees: number;  totalAdmins: number;

  totalAdmins: number;  totalTournaments: number;

  totalTournaments: number;  activeTournaments: number;

  activeTournaments: number;  totalTeams: number;

  totalTeams: number;  totalMatches: number;

  totalMatches: number;}

}

export default function AdminDashboardPage() {

export default function AdminDashboardPage() {  const router = useRouter();

  const router = useRouter();  const [user, setUser] = useState<UserData | null>(null);

  const { theme, setTheme } = useTheme();  const [stats, setStats] = useState<AdminStats>({

  const [user, setUser] = useState<UserData | null>(null);    totalUsers: 0,

  const [stats, setStats] = useState<AdminStats>({    totalPlayers: 0,

    totalUsers: 0,    totalReferees: 0,

    totalPlayers: 0,    totalAdmins: 0,

    totalReferees: 0,    totalTournaments: 0,

    totalAdmins: 0,    activeTournaments: 0,

    totalTournaments: 0,    totalTeams: 0,

    activeTournaments: 0,    totalMatches: 0,

    totalTeams: 0,  });

    totalMatches: 0,  const [isLoading, setIsLoading] = useState(true);

  });

  const [isLoading, setIsLoading] = useState(true);  useEffect(() => {

    checkAuthAndFetchData();

  useEffect(() => {  }, []);

    checkAuthAndFetchData();

  }, []);  const checkAuthAndFetchData = async () => {

    try {

  const checkAuthAndFetchData = async () => {      const userResponse = await fetch('/api/auth/me');

    try {      if (!userResponse.ok) {

      const userResponse = await fetch('/api/auth/me');        router.push('/login');

      if (!userResponse.ok) {        return;

        router.push('/login');      }

        return;      const userData = await userResponse.json();

      }      

      const userData = await userResponse.json();      // Admin değilse player dashboard'a yönlendir

            if (userData.rol !== 'ADMIN') {

      if (userData.rol !== 'ADMIN') {        router.push('/dashboard');

        router.push('/dashboard');        return;

        return;      }

      }      

            setUser(userData);

      setUser(userData);

      // Admin istatistiklerini getir

      // Admin istatistiklerini getir      const statsResponse = await fetch('/api/dashboard/admin/stats');

      const statsResponse = await fetch('/api/dashboard/admin/stats');      if (statsResponse.ok) {

      if (statsResponse.ok) {        const statsData = await statsResponse.json();

        const statsData = await statsResponse.json();        setStats(statsData.stats);

        setStats(statsData.stats);      }

      }    } catch (error) {

    } catch (error) {      console.error('Dashboard verileri yüklenirken hata:', error);

      console.error('Dashboard verileri yüklenirken hata:', error);      router.push('/login');

      router.push('/login');    } finally {

    } finally {      setIsLoading(false);

      setIsLoading(false);    }

    }  };

  };

  if (isLoading || !user) {

  const handleLogout = async () => {    return (

    await fetch('/api/auth/logout', { method: 'POST' });      <div className="flex h-[calc(100vh-4rem)] items-center justify-center">

    router.push('/login');        <div className="flex flex-col items-center gap-4">

  };          <Loader2 className="h-8 w-8 animate-spin text-orange-500" />

          <p className="text-sm text-muted-foreground">Yükleniyor...</p>

  if (isLoading || !user) {        </div>

    return (      </div>

      <div className="flex h-screen items-center justify-center">    );

        <div className="flex flex-col items-center gap-4">  }

          <Loader2 className="h-8 w-8 animate-spin text-orange-500" />

          <p className="text-sm text-muted-foreground">Yükleniyor...</p>  const statsCards = [

        </div>    {

      </div>      title: 'Toplam Kullanıcı',

    );      value: stats.totalUsers,

  }      icon: Users,

      description: 'Sistemdeki toplam kullanıcı sayısı',

  const statsCards = [      color: 'text-blue-500',

    {    },

      title: 'Toplam Kullanıcı',    {

      value: stats.totalUsers,      title: 'Oyuncular',

      icon: Users,      value: stats.totalPlayers,

      description: 'Sistemdeki tüm kullanıcılar',      icon: UserCheck,

      color: 'text-blue-500',      description: 'Kayıtlı oyuncu sayısı',

      link: '/admin/users',      color: 'text-green-500',

    },    },

    {    {

      title: 'Oyuncular',      title: 'Hakemler',

      value: stats.totalPlayers,      value: stats.totalReferees,

      icon: UserCheck,      icon: Flag,

      description: 'Kayıtlı oyuncu sayısı',      description: 'Kayıtlı hakem sayısı',

      color: 'text-green-500',      color: 'text-yellow-500',

      link: '/admin/users?role=PLAYER',    },

    },    {

    {      title: 'Yöneticiler',

      title: 'Hakemler',      value: stats.totalAdmins,

      value: stats.totalReferees,      icon: Shield,

      icon: Shield,      description: 'Sistem yöneticisi sayısı',

      description: 'Aktif hakem sayısı',      color: 'text-red-500',

      color: 'text-yellow-500',    },

      link: '/admin/users?role=REFEREE',    {

    },      title: 'Toplam Turnuva',

    {      value: stats.totalTournaments,

      title: 'Yöneticiler',      icon: Trophy,

      value: stats.totalAdmins,      description: 'Oluşturulan turnuva sayısı',

      icon: UserCog,      color: 'text-purple-500',

      description: 'Sistem yöneticisi sayısı',    },

      color: 'text-red-500',    {

      link: '/admin/users?role=ADMIN',      title: 'Aktif Turnuvalar',

    },      value: stats.activeTournaments,

    {      icon: Calendar,

      title: 'Toplam Turnuva',      description: 'Devam eden turnuvalar',

      value: stats.totalTournaments,      color: 'text-orange-500',

      icon: Trophy,    },

      description: 'Oluşturulan turnuva sayısı',    {

      color: 'text-purple-500',      title: 'Toplam Takım',

      link: '/admin/tournaments',      value: stats.totalTeams,

    },      icon: Users,

    {      description: 'Kayıtlı takım sayısı',

      title: 'Aktif Turnuvalar',      color: 'text-cyan-500',

      value: stats.activeTournaments,    },

      icon: Calendar,    {

      description: 'Devam eden turnuvalar',      title: 'Toplam Maç',

      color: 'text-orange-500',      value: stats.totalMatches,

      link: '/admin/tournaments?status=active',      icon: BarChart3,

    },      description: 'Oynanan/Planlanmış maç sayısı',

    {      color: 'text-pink-500',

      title: 'Toplam Takım',    },

      value: stats.totalTeams,  ];

      icon: UsersRound,

      description: 'Kayıtlı takım sayısı',  return (

      color: 'text-cyan-500',    <>

      link: '/admin/teams',      <header className="sticky top-0 z-10 flex h-16 shrink-0 items-center gap-2 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">

    },        <div className="flex flex-1 items-center gap-2 px-4">

    {          <SidebarTrigger className="-ml-1" />

      title: 'Toplam Maç',          <Separator orientation="vertical" className="mr-2 h-4" />

      value: stats.totalMatches,          <Breadcrumb>

      icon: Swords,            <BreadcrumbList>

      description: 'Planlanan maç sayısı',              <BreadcrumbItem>

      color: 'text-pink-500',                <BreadcrumbPage>Yönetici Paneli</BreadcrumbPage>

      link: '/admin/matches',              </BreadcrumbItem>

    },            </BreadcrumbList>

  ];          </Breadcrumb>

        </div>

  const adminMenuItems = [      </header>

    {

      title: 'Kullanıcı Yönetimi',      <div className="flex flex-1 flex-col gap-4 p-4 pt-0">

      description: 'Kullanıcıları görüntüle, düzenle ve yönet',          <div className="mt-6">

      icon: Users,            <div className="flex items-center gap-2">

      href: '/admin/users',              <Shield className="h-8 w-8 text-primary" />

      color: 'bg-blue-500',              <div>

    },                <h1 className="text-3xl font-bold tracking-tight">

    {                  Hoş geldiniz, {user.adSoyad}

      title: 'Hakem Oluştur',                </h1>

      description: 'Yeni hakem hesabı oluştur',                <p className="text-muted-foreground">

      icon: Shield,                  Sistem yönetimi ve genel istatistikler

      href: '/admin/referees/create',                </p>

      color: 'bg-yellow-500',              </div>

    },            </div>

    {          </div>

      title: 'Takım Yönetimi',

      description: 'Takımları görüntüle ve yönet',          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">

      icon: UsersRound,            {statsCards.map((stat) => {

      href: '/admin/teams',              const Icon = stat.icon;

      color: 'bg-cyan-500',              return (

    },                <Card key={stat.title}>

    {                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">

      title: 'Turnuva Yönetimi',                    <CardTitle className="text-sm font-medium">

      description: 'Turnuva oluştur, düzenle ve yönet',                      {stat.title}

      icon: Trophy,                    </CardTitle>

      href: '/admin/tournaments',                    <Icon className={`h-4 w-4 ${stat.color}`} />

      color: 'bg-purple-500',                  </CardHeader>

    },                  <CardContent>

    {                    <div className="text-2xl font-bold">{stat.value}</div>

      title: 'Maç Yönetimi',                    <p className="text-xs text-muted-foreground">

      description: 'Maçları yönet, hakem ata, sonuç gir',                      {stat.description}

      icon: Swords,                    </p>

      href: '/admin/matches',                  </CardContent>

      color: 'bg-pink-500',                </Card>

    },              );

    {            })}

      title: 'Sayfa Yönetimi',          </div>

      description: 'Ana sayfa içeriklerini düzenle',

      icon: FileText,          <div className="grid gap-4 md:grid-cols-2">

      href: '/admin/pages',            <Card>

      color: 'bg-green-500',              <CardHeader>

    },                <CardTitle>Hızlı İşlemler</CardTitle>

  ];                <CardDescription>

                  Sık kullanılan yönetim işlemleri

  return (                </CardDescription>

    <div className="min-h-screen bg-background">              </CardHeader>

      {/* Top Navigation Bar */}              <CardContent className="grid gap-2">

      <header className="sticky top-0 z-50 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">                <button className="flex items-center gap-2 rounded-lg border p-3 text-left hover:bg-accent">

        <div className="container mx-auto px-4 h-16 flex items-center justify-between">                  <Users className="h-5 w-5 text-primary" />

          <div className="flex items-center gap-4">                  <div>

            <Link href="/admin" className="flex items-center gap-2 text-xl font-bold">                    <p className="font-medium">Kullanıcı Yönetimi</p>

              <Shield className="w-6 h-6 text-orange-500" />                    <p className="text-xs text-muted-foreground">

              <span>Admin Panel</span>                      Kullanıcıları görüntüle ve düzenle

            </Link>                    </p>

          </div>                  </div>

                          </button>

          <div className="flex items-center gap-2">                <button className="flex items-center gap-2 rounded-lg border p-3 text-left hover:bg-accent">

            <span className="text-sm text-muted-foreground hidden md:inline">                  <Trophy className="h-5 w-5 text-primary" />

              {user.adSoyad}                  <div>

            </span>                    <p className="font-medium">Turnuva Yönetimi</p>

            <Button                    <p className="text-xs text-muted-foreground">

              variant="ghost"                      Tüm turnuvaları yönet

              size="icon"                    </p>

              onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}                  </div>

              className="rounded-full"                </button>

            >                <button className="flex items-center gap-2 rounded-lg border p-3 text-left hover:bg-accent">

              <Sun className="h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />                  <Flag className="h-5 w-5 text-primary" />

              <Moon className="absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />                  <div>

              <span className="sr-only">Tema Değiştir</span>                    <p className="font-medium">Hakem Atamaları</p>

            </Button>                    <p className="text-xs text-muted-foreground">

            <Button variant="ghost" size="icon" onClick={handleLogout}>                      Maçlara hakem ata

              <LogOut className="h-5 w-5" />                    </p>

              <span className="sr-only">Çıkış Yap</span>                  </div>

            </Button>                </button>

          </div>              </CardContent>

        </div>            </Card>

      </header>

            <Card>

      {/* Main Content */}              <CardHeader>

      <main className="container mx-auto px-4 py-8">                <CardTitle>Sistem Durumu</CardTitle>

        {/* Page Header */}                <CardDescription>Platform genel durumu</CardDescription>

        <div className="mb-8">              </CardHeader>

          <h1 className="text-3xl font-bold mb-2">Admin Dashboard</h1>              <CardContent className="space-y-4">

          <p className="text-muted-foreground">                <div className="flex items-center justify-between">

            Hoş geldiniz, sistem yönetim paneline                  <span className="text-sm font-medium">Platform Durumu</span>

          </p>                  <span className="flex items-center gap-2 text-sm text-green-600">

        </div>                    <div className="h-2 w-2 rounded-full bg-green-600" />

                    Çevrimiçi

        {/* Stats Grid */}                  </span>

        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-8">                </div>

          {statsCards.map((stat, index) => {                <div className="flex items-center justify-between">

            const Icon = stat.icon;                  <span className="text-sm font-medium">Veritabanı</span>

            return (                  <span className="flex items-center gap-2 text-sm text-green-600">

              <Link key={index} href={stat.link}>                    <div className="h-2 w-2 rounded-full bg-green-600" />

                <Card className="hover:shadow-lg transition-shadow cursor-pointer">                    Bağlı

                  <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">                  </span>

                    <CardTitle className="text-sm font-medium">                </div>

                      {stat.title}                <div className="flex items-center justify-between">

                    </CardTitle>                  <span className="text-sm font-medium">API Servisleri</span>

                    <Icon className={`h-4 w-4 ${stat.color}`} />                  <span className="flex items-center gap-2 text-sm text-green-600">

                  </CardHeader>                    <div className="h-2 w-2 rounded-full bg-green-600" />

                  <CardContent>                    Aktif

                    <div className="text-2xl font-bold">{stat.value}</div>                  </span>

                    <p className="text-xs text-muted-foreground mt-1">                </div>

                      {stat.description}              </CardContent>

                    </p>            </Card>

                  </CardContent>          </div>

                </Card>        </div>

              </Link>    </>

            );  );

          })}}

        </div>

        {/* Admin Menu Grid */}
        <div>
          <h2 className="text-2xl font-bold mb-4">Yönetim Menüsü</h2>
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {adminMenuItems.map((item, index) => {
              const Icon = item.icon;
              return (
                <Link key={index} href={item.href}>
                  <Card className="hover:shadow-lg transition-all hover:border-orange-500 cursor-pointer h-full">
                    <CardHeader>
                      <div className="flex items-center gap-3 mb-2">
                        <div className={`${item.color} p-2 rounded-lg`}>
                          <Icon className="h-6 w-6 text-white" />
                        </div>
                        <CardTitle className="text-lg">{item.title}</CardTitle>
                      </div>
                      <CardDescription>{item.description}</CardDescription>
                    </CardHeader>
                  </Card>
                </Link>
              );
            })}
          </div>
        </div>
      </main>
    </div>
  );
}
